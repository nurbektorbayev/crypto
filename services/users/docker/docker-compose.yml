services:
  users-app:
    build:
      context: ../../  # Контекст сборки теперь на 2 уровня выше, в services
      dockerfile: common/laravel/Dockerfile  # Путь к Dockerfile внутри папки common/laravel
      args:
        PROJECT_NAME: users
    container_name: users-app
    volumes:
      - ../source:/var/www  # Монтируем исходный код Laravel в контейнер
    networks:
      - crypto_network
    depends_on:
      - users-db
    environment:
      - DB_HOST=users-db
      - DB_PORT=5432
      - DB_DATABASE=${DB_POSTGRES_DATABASE}
      - DB_USERNAME=${DB_POSTGRES_USERNAME}
      - DB_PASSWORD=${DB_POSTGRES_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_QUEUE=users
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - LOGSTASH_HOST=${LOGSTASH_HOST}
      - LOGSTASH_PORT=${LOGSTASH_PORT}

  users-db:
    image: postgres:13  # Используем официальный образ PostgreSQL
    container_name: users-db
    environment:
      - POSTGRES_DB=${DB_POSTGRES_DATABASE}
      - POSTGRES_USER=${DB_POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${DB_POSTGRES_PASSWORD}
    volumes:
      - ./db/data:/var/lib/postgresql/data  # Прокидываем volume для хранения данных
    networks:
      - crypto_network
    ports:
      - ${DB_POSTGRES_EXT_PORT}:5432

networks:
  crypto_network:
    driver: bridge
